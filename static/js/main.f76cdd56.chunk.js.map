{"version":3,"sources":["components/Header.js","utils/API.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","axios","get","sortTypes","up","class","fn","a","b","age","down","default","Table","state","currentSort","empFilter","empList","onSortChange","nextSort","setState","getRandomUsers","API","then","res","console","log","tempUserArray","data","results","forEach","e","push","name","first","last","location","dob","id","length","catch","err","handleFormSubmit","event","preventDefault","alert","filter","filterList","handleInputChange","target","value","toLowerCase","includes","this","type","onChange","placeholder","onClick","sort","map","p","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f76cdd56.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>Employee Directory</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import axios from \"axios\";\r\n\r\nconst queryURL = \"https://randomuser.me/api/?results=10&nat=us\";\r\n\r\nexport default {\r\n    search: function () {\r\n        return axios.get(queryURL);\r\n            // .then(\r\n            //     console.log(res.data)\r\n            //     res => {\r\n            //     const employees = res.data.results;\r\n            //     console.log(res.data.results[0]);\r\n            //     return employees.map(employee => {\r\n            //         return{\r\n            //             image: employee.image,\r\n            //             firstName: employee.name.first,\r\n            //             lastName: employee.name.last,\r\n            //             phone: employee.phone,\r\n            //             email: employee.email,\r\n            //             gender: employee.gender\r\n            //         }\r\n\r\n            //     })\r\n\r\n            // }\r\n            // )\r\n    }\r\n}; ","import React from \"react\";\r\nimport API from \"../utils/API\";\r\nimport \"./style.css\";\r\n\r\nconst sortTypes = {\r\n\tup: {\r\n\t\tclass: 'sort-up',\r\n\t\tfn: (a, b) => a.age - b.age\r\n\t},\r\n\tdown: {\r\n\t\tclass: 'sort-down',\r\n\t\tfn: (a, b) => b.age - a.age\r\n\t},\r\n\tdefault: {\r\n\t\tclass: 'sort',\r\n\t\tfn: (a, b) => a\r\n\t}\r\n};\r\n\r\nclass Table extends React.Component {\r\n\t// declaring the default state\r\n\tstate = {\r\n\t\tcurrentSort: 'default',\r\n\t\tempFilter: \"\",\r\n\t\tempList: []\r\n\t};\r\n\r\n\r\n\t// method called every time the sort button is clicked\r\n\t// it will change the currentSort value to the next one\r\n\tonSortChange = () => {\r\n\t\tconst { currentSort } = this.state;\r\n\t\tlet nextSort;\r\n\r\n\t\tif (currentSort === 'down') nextSort = 'up';\r\n\t\telse if (currentSort === 'up') nextSort = 'default';\r\n\t\telse if (currentSort === 'default') nextSort = 'down';\r\n\r\n\t\tthis.setState({\r\n\t\t\tcurrentSort: nextSort\r\n\t\t});\r\n\t};\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tthis.getRandomUsers();\r\n\t}\r\n\r\n\tgetRandomUsers = () => {\r\n\t\tAPI.search()\r\n\t\t.then(res => {\r\n\t\t\tconsole.log(res);\r\n\t\t\tlet tempUserArray = [];\r\n\t\t\tres.data.results.forEach(e => {\r\n\t\t\t\tconsole.log(\"e = \");\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t\ttempUserArray.push({\r\n\t\t\t\t\tname: e.name.first + \" \" + e.name.last,\r\n\t\t\t\t\tlocation: e.location.state,\r\n\t\t\t\t\tage: e.dob.age,\r\n\t\t\t\t\tid: tempUserArray.length + 1\r\n\t\t\t\t});\r\n\t\t\t\tconsole.log(tempUserArray);\r\n\t\t\t\t});\r\n\t\t\tthis.setState({empList: tempUserArray});\r\n\t\t\t})\r\n//\t\t.then(res => this.setState({ results: res.data.data }))\r\n\t\t.catch(err => console.log(err));\r\n\t  };\r\n\r\n\thandleFormSubmit = event => {\r\n\t\t// Preventing the default behavior of the form submit (which is to refresh the page)\r\n\t\tevent.preventDefault();\r\n\t\r\n\t\t// Alert the user their first and last name, clear `this.state.firstName` and `this.state.lastName`, clearing the inputs\r\n\t\talert(`${[...this.state.empList].filter(this.filterList).length} employees found matching filter`);\r\n\t\t// this.setState({\r\n\t\t//   empFilter: \"\"\r\n\t\t// });\r\n\t};\r\n\r\n\thandleInputChange = event => {\r\n\t\t// Getting the value and name of the input which triggered the change\r\n\t\tconst { name, value } = event.target;\r\n\t\r\n\t\tconsole.log(`name is ${name}, value is ${value}`);\r\n\t\t// Updating the input's state\r\n\t\tthis.setState({\r\n\t\t\tempFilter: value\r\n\t\t});\r\n\t  };\r\n\r\n\tfilterList = e => {\r\n\t\t// console.log(\"in filterList function\");\r\n\t\t// console.log(e.name);\r\n\t\t// console.log(this.state.empFilter);\r\n\t\treturn e.name.toLowerCase().includes(this.state.empFilter.toLowerCase());\r\n\t}\r\n\r\n\r\n    render() {\r\n\t\t// const { data } = this.props;\r\n\t\tconst { currentSort } = this.state;\r\n  \r\n        return (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"wrap\">\r\n\t\t\t\t\t<div className=\"search\">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tclassName=\"searchTerm\"\r\n\t\t\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t\t\t\tplaceholder=\"Filter Employees by Name\"\r\n\t\t\t\t\t\t\tname=\"filterBar\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<button type=\"submit\" onClick={this.handleFormSubmit} className=\"searchButton\">\r\n\t\t\t\t\t\t\t<i className=\"fa fa-search\"></i>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"tableDiv d-flex justify-content-center\">\r\n\t\t\t\t\t<table className='text-left dataTable'>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Name</th>\r\n\t\t\t\t\t\t\t\t<th>Location</th>\r\n\t\t\t\t\t\t\t\t<th>Age\r\n\t\t\t\t\t\t\t\t\t<button className=\"sortButton\" onClick={this.onSortChange}>\r\n\t\t\t\t\t\t\t\t\t\t<i className={`fas fa-${sortTypes[currentSort].class}`} />\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{[...this.state.empList].filter(this.filterList).sort(sortTypes[currentSort].fn).map(p => (\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<td>{p.name}</td>\r\n\t\t\t\t\t\t\t\t\t<td>{p.location}</td>\r\n\t\t\t\t\t\t\t\t\t<td>{p.age}</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Table;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Table from \"./components/Table\";\n// import SearchBar from \"./components/SearchBar\";\n\n// const tableData = [\n// \t{\n// \t\tname: 'Maria Francis-Moullier',\n// \t\tdepartment: \"Web Development\",\n// \t\tsalary: 60000\n// \t},\n// \t{\n// \t\tname: 'Matthew Wierschem',\n// \t\tdepartment: \"Management\",\n// \t\tsalary: 60000\n// \t},\n// \t{\n// \t\tname: 'Kenn Gaub',\n// \t\tdepartment: \"Human Resources\",\n// \t\tsalary: 50000\n// \t},\n// \t{\n// \t\tname: 'Chris Cronenberg',\n// \t\tdepartment: \"Data Analytics\",\n// \t\tsalary: 80000\n// \t},\n// \t{\n// \t\tname: 'Steve Jensen',\n// \t\tdepartment: \"Data Analytics\",\n// \t\tsalary: 75000\n// \t},\n// \t{\n// \t\tname: 'Neil Kempton',\n// \t\tdepartment: \"Manufacturing\",\n// \t\tsalary: 65000\n// \t},\n// \t{\n// \t\tname: 'Michael Reyes',\n// \t\tdepartment: \"Training\",\n// \t\tsalary: 85000\n// \t},\n// \t{\n// \t\tname: 'Brian Houtman',\n// \t\tdepartment: \"Design\",\n// \t\tsalary: 55000\n// \t}\n// ];\n\n\nfunction App() {\n  return (\n    <div>\n    \t<Header />\n    \t{/* <SearchBar /> */}\n\t\t<Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}